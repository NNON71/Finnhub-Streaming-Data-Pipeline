services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.8.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper
    restart: always
    networks:
      - kafka_network

  broker:
    image: confluentinc/cp-kafka:7.8.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      # KAFKA_LOG_RETENTION_HOURS: 168
      # KAFKA_LOG_SEGMENT_BYTES: 1073741824
      # KAFKA_LOG_RETENTION_BYTES: -1
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka
    restart: always
    networks:
      - kafka_network

  schema-registry:
    image: confluentinc/cp-schema-registry:7.8.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - broker
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://broker:9092'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
    ports:
      - "8081:8081"
    restart: always
    networks:
      - kafka_network

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.8.0
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
      - ksqldb-server
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: broker:9092
      CONTROL_CENTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONTROL_CENTER_KSQL_KSQLDB1_URL: http://ksqldb-server:8088
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: http://localhost:8088
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    ports:
      - "9021:9021"
    # restart: always
    networks:
      - kafka_network

  ksqldb-server:
    build: 
      context: ./stream_processing
      dockerfile: Dockerfile
    container_name: ksqldb-server
    depends_on:
      - broker
      - schema-registry
    environment:
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_BOOTSTRAP_SERVERS: "broker:9092"
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_KSQL_EXTENSION_DIR: "/etc/ksqldb/ext/"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      # KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      # KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
      # KSQL_KSQL_STREAMS_AUTO_OFFSET_RESET: "earliest"
      # KSQL_KSQL_STREAMS_CACHE_MAX_BYTES_BUFFERING: "20000000"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "8088:8088"
    networks:
      - kafka_network

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:7.8.0
    container_name: ksqldb-cli
    depends_on:
      - broker
      - ksqldb-server
    stdin_open: true
    tty: true
    entrypoint: /bin/sh
    networks:
      - kafka_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    hostname: elasticsearch
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - kafka_network

  grafana:
    image: grafana/grafana:latest
    hostname: grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - kafka_network

  producer:
    build:
      context: ./producer
      dockerfile: Dockerfile
    container_name: producer
    env_file:
      - .env
    depends_on:
      - broker
      - schema-registry
    restart: always
    networks:
      - kafka_network
  
  consumer:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: consumer
    env_file:
      - .env
    depends_on:
      - producer
      - broker
      - schema-registry
    restart: always
    networks:
      - kafka_network


volumes:
  zookeeper_data:
  kafka_data:
  es_data:
  grafana_data:

networks:
  kafka_network: